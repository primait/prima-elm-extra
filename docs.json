[{"name":"Prima.Extra","comment":"\n\n\n# Conditionals\n\n@docs ifThenMap, ifThenElse, ifThenElseMap\n\n","unions":[],"aliases":[],"values":[{"name":"ifThenElse","comment":" If function\n\n        ifThenElse True \"x\" \"_\" -- => \"x\"\n        ifThenElse False \"_\" \"x\" -- => \"x\"\n\n","type":"Basics.Bool -> a -> a -> a"},{"name":"ifThenElseMap","comment":" Conditional if that can be used in update circuits to avoid parenthesis/anonymous functions\neg.\n\n        model\n        |> doSomethingNiceWithModel\n        |> ifThenElseMap someBooleanConditionBasedOnModel\n            changeModelIfTrue\n            changeModelIfFalse\n        |> withoutCmds []\n\n","type":"(a -> Basics.Bool) -> (a -> b) -> (a -> b) -> a -> b"},{"name":"ifThenMap","comment":" Maps the value whether the given predicate holds true for that value\n\n        showResults : List String -> List String\n        showResults xs =\n            xs\n                |> ifThenMap List.isEmpty\n                    (\\_ -> [ \"Cannot find users matching this query\" ])\n\n","type":"(a -> Basics.Bool) -> (a -> a) -> a -> a"}],"binops":[]},{"name":"Prima.Extra.Cmd","comment":" Update function helpers\n\n@docs batchMap\n@docs cmdMap\n@docs mapAfterCmds\n@docs mapCmds\n@docs withChildrenCmds\n@docs withCmd\n@docs withCmds\n@docs withCmdsMap\n@docs withoutCmds\n\n\n# Conditionals\n\n@docs ifThenCmd\n@docs ifThenCmdMap\n@docs ifThenCmds\n@docs ifThenCmdsMap\n@docs ifThenElseCmdMap\n@docs ifThenElseCmdsMap\n@docs ifThenElseCmds\n\n\n# Effects\n\n@docs delayMsg\n@docs toCmd\n\n","unions":[],"aliases":[],"values":[{"name":"batchMap","comment":" ","type":"List.List (a -> Platform.Cmd.Cmd msg) -> a -> Platform.Cmd.Cmd msg"},{"name":"cmdMap","comment":" Maps the given Cmd suppliers to the same value. Usually used like that:\n\n    fetchUsers : Model -> Cmd Msg\n    sendLog : Model -> Cmd Msg\n    initializeAnalytics : Model -> Cmd Msg\n\n    model\n        |> cmdMap\n            [ fetchUsers\n            , sendLog\n            , initializeAnalytics\n            ]\n\n","type":"List.List (a -> Platform.Cmd.Cmd msg) -> a -> List.List (Platform.Cmd.Cmd msg)"},{"name":"delayMsg","comment":" Create a Cmd that triggers the given msg after n milliseconds\n","type":"Basics.Int -> msg -> Platform.Cmd.Cmd msg"},{"name":"ifThenCmd","comment":" ","type":"Basics.Bool -> Platform.Cmd.Cmd msg -> Platform.Cmd.Cmd msg"},{"name":"ifThenCmdMap","comment":" ","type":"(a -> Basics.Bool) -> (a -> Platform.Cmd.Cmd msg) -> a -> Platform.Cmd.Cmd msg"},{"name":"ifThenCmds","comment":" ","type":"Basics.Bool -> List.List (Platform.Cmd.Cmd msg) -> Platform.Cmd.Cmd msg"},{"name":"ifThenCmdsMap","comment":" ","type":"(a -> Basics.Bool) -> List.List (a -> Platform.Cmd.Cmd msg) -> a -> Platform.Cmd.Cmd msg"},{"name":"ifThenElseCmdMap","comment":" ","type":"(a -> Basics.Bool) -> (a -> Platform.Cmd.Cmd msg) -> (a -> Platform.Cmd.Cmd msg) -> a -> Platform.Cmd.Cmd msg"},{"name":"ifThenElseCmds","comment":" ","type":"Basics.Bool -> List.List (Platform.Cmd.Cmd msg) -> List.List (Platform.Cmd.Cmd msg) -> Platform.Cmd.Cmd msg"},{"name":"ifThenElseCmdsMap","comment":" ","type":"(a -> Basics.Bool) -> List.List (a -> Platform.Cmd.Cmd msg) -> List.List (a -> Platform.Cmd.Cmd msg) -> a -> Platform.Cmd.Cmd msg"},{"name":"mapAfterCmds","comment":" ","type":"(model -> model) -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"},{"name":"mapCmds","comment":" ","type":"(msg -> otherMsg) -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd otherMsg )"},{"name":"toCmd","comment":" Lifts a msg to a Cmd.\n\n**warning:** this is usually an antipattern.\n\nThere are specific case in which this can be used\n(such as [flip](https://css-tricks.com/animating-layouts-with-the-flip-technique/) animations) but\nunless you encountered such edge cases, be sure to double check if there are different approaches possible\n\n","type":"msg -> Platform.Cmd.Cmd msg"},{"name":"withChildrenCmds","comment":" ","type":"(childrenMsg -> msg) -> ( model, Platform.Cmd.Cmd childrenMsg ) -> ( model, Platform.Cmd.Cmd msg )"},{"name":"withCmd","comment":" ","type":"Platform.Cmd.Cmd msg -> model -> ( model, Platform.Cmd.Cmd msg )"},{"name":"withCmds","comment":" ","type":"List.List (Platform.Cmd.Cmd msg) -> model -> ( model, Platform.Cmd.Cmd msg )"},{"name":"withCmdsMap","comment":" Used to apply an updated model to the cmds in fluid style updating\n","type":"List.List (model -> Platform.Cmd.Cmd msg) -> model -> ( model, Platform.Cmd.Cmd msg )"},{"name":"withoutCmds","comment":" ","type":"model -> ( model, Platform.Cmd.Cmd msg )"}],"binops":[]},{"name":"Prima.Extra.Function","comment":"\n\n@docs curry, uncurry, flip\n\n","unions":[],"aliases":[],"values":[{"name":"curry","comment":" Given a function with a single argument as pair, returns its curried version\n\n        sumPair : (Int, Int) -> Int -> Int\n        sumPair (x, y) = x + y\n\n        curriedSum : Int -> Int -> Int\n        curriedSum x y = curry sumPair\n\n","type":"(( a, b ) -> c) -> a -> b -> c"},{"name":"flip","comment":" Flips the first two (curried) arguments of a function\n\n        cons : a -> List a -> List a\n        cons = (::)\n\n        flippedCons : List a -> a -> List a\n        flippedCons = flip cons\n\n","type":"(a -> b -> c) -> b -> a -> c"},{"name":"uncurry","comment":" Given a function with two (curried) arguments, returns a function whose only argument is a pair\n\n        curriedSum : Int -> Int -> Int\n        curriedSum x y = x + y\n\n        sumPair : (Int, Int) -> Int -> Int\n        sumPair = uncurry curriedSum\n\n","type":"(a -> b -> c) -> ( a, b ) -> c"}],"binops":[]},{"name":"Prima.Extra.String","comment":"\n\n@docs capitalize\n\n","unions":[],"aliases":[],"values":[{"name":"capitalize","comment":"\n\n        capitalize \"hello\" -- => \"Hello\"\n        capitalize \"Hello\" -- => \"Hello\"\n\n","type":"String.String -> String.String"}],"binops":[]}]